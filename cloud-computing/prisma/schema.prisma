// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id          String            @id @default(cuid())
  name        String            @unique
  email       String            @unique
  password    String
  phone       String?
  birthdate   DateTime?         @db.Date()
  gender      Gender?
  preferences UserPreferences[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  UserReview  UserReview[]
  Plan        Plan[]
}

model Preference {
  id              String            @id @default(cuid())
  name            String
  urlPlaceholder  String
  UserPreferences UserPreferences[]
}

model UserPreferences {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  preference   Preference @relation(fields: [preferenceId], references: [id])
  preferenceId String
  assignedAt   DateTime   @default(now())
  assignedBy   String

  @@id([userId, preferenceId])
}

model Place {
  id           String          @id @default(cuid())
  name         String
  latitude     Float
  longitude    Float
  address      String
  url          String?
  status       String?
  phone        String?
  primaryTypes String?
  types        String?
  rating       Float?
  ratingCount  Int?
  priceLevel   String?
  UserReview   UserReview[]
  plans        PlacesOnPlans[]
}

model UserReview {
  id        String   @id @default(cuid())
  review    String
  star      Int
  date      DateTime @db.Date()
  place     Place    @relation(fields: [placeId], references: [id])
  placeId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id        String          @id @default(cuid())
  name      String?
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime        @db.Date()
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  places    PlacesOnPlans[]
}

model PlacesOnPlans {
  plan       Plan     @relation(fields: [planId], references: [id])
  planId     String
  place      Place    @relation(fields: [placeId], references: [id])
  placeId    String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([planId, placeId])
}
